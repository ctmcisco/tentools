name: Actions Workflow
on: [push, pull_request]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # setup and run docker container
      - name: Download the container
        run: docker pull sometheycallme/docker-nessus:latest
      # separate download and run just to see the timing
      - name: Startup the container
        run: docker run -p 8834:8834 -p 2220:22 --hostname nessus --name nessus -d sometheycallme/docker-nessus:latest

      # setup nessus
      - name: Enable ssh within the container for complete testing
        run: |
          # change password for root so that we can test Set-TenCertificate
          docker exec nessus echo -e "abcd1234\nabcd1234" | passwd

          # install ssh to test Set-TenCertificate
          docker exec nessus yum install -y openssh-server
          docker exec nessus ssh-keygen -P "" -t rsa -f /etc/ssh/ssh_host_rsa_key
          docker exec nessus ssh-keygen -P "" -t dsa -f /etc/ssh/ssh_host_dsa_key
          docker exec nessus ssh-keygen -P "" -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
          docker exec nessus ssh-keygen -P "" -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
          docker exec nessus /usr/sbin/sshd -D &
      - name: Write nessus license from secrets to disk
        run: 'echo "$NLICENSE" > /tmp/nessus.license'
        shell: bash
        env:
          NLICENSE: ${{secrets.LICENSE}}

      # time to party
      - name: Setup PowerShell module cache
        id: cache-psmodulesupdate
        uses: actions/cache@v2
        with:
          path: |
            /home/runner/.local/share/powershell/Modules/PSFramework
            /home/runner/.local/share/powershell/Modules/Pester
          key: ${{ runner.os }}-psmodulesupdate
      - name: Install required PowerShell modules
        if: steps.cache-psmodulesupdate.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSFramework, Pester -ErrorAction Stop
      - name: Initialize the nessus server with admin user and license
        shell: pwsh
        run: |
          Import-Module ./tentools.psd1
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
          $splat = @{
            ComputerName = "localhost"
            AcceptSelfSignedCert = $true
            Credential = $cred
            EnableException = $true
            Port = 8834
            Path = "/tmp/nessus.license"
          }
          Initialize-TenServer @splat
      - name: Run Pester tests
        shell: pwsh
        run: |
          ./tests/pester.ps1
